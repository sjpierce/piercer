% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Data_Management_Functions.R
\name{tag_um}
\alias{tag_um}
\title{Tag user-missing values}
\usage{
tag_um(x, ums)
}
\arguments{
\item{x}{A vector of class haven_labelled_spss, such as created by the
labelled_spss() function from the haven package. The vector should
have an na_values attribute listing the values that should be treated as
NAs.}

\item{ums}{A vector of tagged_na() values in the same order that the
user-missing values appear in the na_labels attribute of x.}
}
\value{
A copy of vector x (of class haven_labelled_spss) where the values
  specified in ums have been converted to tagged NA values and are now
  treated as NAs by R.
}
\description{
This function converts valid values in an labelled_spss vector
  that has a non-NULL na_values attribute to tagged NAs, while retaining their
  value labels. This is most useful for numeric variables that have explicit
  single-digit user-missing values that are not yet being treated as NAs in R.
}
\details{
=============================================================================

This function builds on features from the haven package. It is a
  convenience function for people who import SPSS data files that used the
  discrete missing values feature to mark several values as user-missing
  values. SPSS treats them like missing data while preserving distinct value
  labels. However, if one reads an SPSS data file in with haven's read_sav()
  and the source file had a variable with discrete missing values, those are
  identified by the na_values attribute on the variable in the resulting
  tibble but are not yet treated as NAs by R. This function converts them to
  tagged NA values.
}
\examples{
library(haven)
y <- labelled_spss(x = 1:5,
                   labels = c(Good = 1, Bad = 3, Unknown = 4, DK = 5),
                   na_values = c(4, 5))
str(y)
mean(y) # Incorrect result (treats 4 & 5 as valid values)
y
y2 <- tag_um(y, ums = c(tagged_na("4"), tagged_na("5")))
y2
print_tagged_na(y2)
str(y2)
mean(y2)               # Correct result (4 & 5 are now treated as NAs).
mean(y2, na.rm = TRUE) # Correct result (4 & 5 are now treated as NAs).

}
